---
title: "Northwest Syria Cash Working Group Earthquake Response Bulletin"
date:  "23 March 2023"
output:
  html_document:
    code_download: yes
    theme: readable
    toc: yes
    toc_depth: 4
    toc_float: yes
    number_sections: no
    collapsed: no
always_allow_html: yes
---

```{css, echo=FALSE}

#TOC::before {
  content: "";
  display: block;
  height: 70px;
  margin: 2em 20px 40px 20px;
  background-image: url("NWS-CWG logo.PNG");
  background-size: contain;
  background-position: center center;
  background-repeat: no-repeat;
}
```

```{=html}
<style>
    body .main-container {
        max-width: 1280px;
    }
</style>
```


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(scales)
library(magrittr)
library(viridis)
library(patchwork)
library(DT)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(magrittr)
library(readxlsb)

theme_set(theme_light())

# disabling scientific notation
options(scipen = 100)

# pander tables all in one row
panderOptions('table.split.table', Inf)

# pander thousands separator
panderOptions("big.mark", ",")

# replace 
opts <- options(knitr.kable.NA = "")

`%out%` <- Negate(`%in%`)

# function for transposing df
transpose_df <- function(df) {
  t_df <- data.table::transpose(df)
  colnames(t_df) <- rownames(df)
  rownames(t_df) <- colnames(df)
  t_df <- t_df %>%
    tibble::rownames_to_column(.data = .) %>%
    tibble::as_tibble(.)
  return(t_df)
}

# function beneficiary summaries
sum_ben <- function(df, column_var){
  
  column_var <- enquo(column_var)
  
  df %>%
    group_by(!!column_var) %>% # must add bang-bang
    summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>% 
    arrange(desc(beneficiaries))
    
}

# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
  
  column_var1 <- enquo(column_var1)
  column_var2 <- enquo(column_var2)
  
  df %>%
    group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
    summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
    
}

# scaling functions 
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}

#mode function 
mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

```


```{r}

pcode3_shape <- 
  sf::st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp", 
          quiet = TRUE)

nw_pcode3 <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1, 
                  sheet = 1) %>%
  clean_names() %>% 
  filter(ao_c == "NW") %>% 
  pull(admin3pcode)


```

```{r}
read_excel("./data/ocha_unedited/2023_WoS_SNFI_XBHub_4Ws_Jan&Feb2023.xlsx", 
           sheet = "Shelter 4Ws") %>% 
  clean_names()
```

```{r}



rename_cccm <- function(tbl) {
  tbl %>% 
    rename(admin1pcode = gov_pcode,
           admin2pcode = dist_pcode, 
           admin3pcode = sub_dist_pcode, 
           admin4pcode = comm_pcode, 
           governorate = gov_en, 
           district = dist_en, 
           sub_district = sub_dist_en, 
           community = comm_en) 
}

cccm %>% filter(assistance_provider == "ISIMM" & admin4pcode == "C1035")



```



```{r warning=FALSE}
wash <- read_excel("./data/ocha_edited/WASH OCHA2023 Jan 2023.xlsx",) %>% 
  clean_names() %>% 
  rename(admin3pcode = sd_pcode, 
         admin4pcode = com_p_code, 
         admin5pcode = camp_pcode, 
         beneficiaries = number_benificiaries_in_the_location2, 
         camp_name = camp_asm_almkhym,
         school_name = schools_asm_lmdrst,
         collective_shelter_name = collective_shelter_asm_mrkz_alaywa_u_02be,
         health_facility_name = health_facility_name_asm_almnshat_altbyt, 
         water_system_name = name_of_water_system_asm_mhtt_almyah, 
         partner_code = ip_code) %>% 
  mutate(ifelse(is.na(partner_code), ngo_code, partner_code))

cccm_names <- c("admin1pcode", "governorate",
                "admin2pcode","district",  
                "admin3pcode", "sub_district", 
                "admin4pcode", "community", 
                "is_2022", 
                "jan", "feb", "mar", "apr", 
                "may", "jun", "jul", "aug", 
                "sep", "oct", "nov", "dec", 
                "cumulative")

cccm <- rbind(
  read_excel(
    "./data/ocha_unedited/202302_CCCM 4Ws (as of February 2023).xlsx",
    sheet = "ISIMM_Assisted_IDPs",
    skip = 1) %>%
    setNames(cccm_names) %>% 
    mutate(assistance_provider = "ISIMM"),
  read_excel(
    "./data/ocha_unedited/202302_CCCM 4Ws (as of February 2023).xlsx",
    sheet = "CCCM_Activities_Assisted_IDPs",
    skip = 1) %>%
    setNames(cccm_names) %>% 
    mutate(assistance_provider = "CCCM")) %>% 
  mutate(jan = as.numeric(jan), 
         feb = as.numeric(feb))

shelter_select <- function(tbl){
  tbl %>% 
    select(sector, hub, response_modality, 
         # reporting_organisation = implementing_partner_name_or_code, 
         implementing_partner = final_implementing_partner_name_or_code, 
         governorate = governorate_mohafaza, 
         district = district_mantika, 
         sub_district = sub_district_nahya, 
         location, 
         location_type, 
         community = specific_location_name, 
         reporting_month, 
         start_date = activity_start_date_dd_mm_yyyy,
         end_date = activity_end_date_dd_mm_yyyy,
         project_status = status, 
         activity, 
         delivery_modality, 
         cash_conditionality,
         transfer_value = cash_transfer_voucher_value_per_household_usd, 
         cash_delivery_mechanism, 
         beneficiaries = total_number_individuals_reached, 
         families = total_number_of_families_h_hs_reached, 
         admin1pcode = admin1_pcode, 
         admin2pcode = admin2_pcode, 
         admin3pcode = admin3_pcode, 
         admin4pcode = location_pcode,
         new_beneficiaries = first_round_of_response_type_starting_2023)
}

snfi <- read_excel("./data/ocha_unedited/2023_WoS_SNFI_XBHub_4Ws_Jan&Feb2023.xlsx", 
           sheet = "Shelter 4Ws") %>% 
  clean_names() %>% 
  filter(!is.na(sector)) %>%  
  shelter_select() %>% 
  rbind(read_excel("./data/ocha_unedited/2023_WoS_SNFI_XBHub_4Ws_Jan&Feb2023.xlsx", 
           sheet = "NFI 4Ws") %>% 
          clean_names() %>% 
          filter(!is.na(sector)) %>% 
          shelter_select())

health_names <- read_excel("./data/ocha_unedited/Monthly Health Cluster Indicators Report GZT Jan-Feb 2023.xlsx", 
           sheet = 1) %>% 
  clean_names() %>% 
  transpose_df() %>% 
  select(rowname) %>% 
  mutate(rowname = str_replace_all(rowname,
  "number_of_|for_|supported_|between_levels_of_care_|received_|inside_syria_cross_line_and_cross_border_|inside_syria__cross_line_and_cross_border|attended_by_a_", ""), 
  rowname = str_replace_all(rowname, "consultations", "cons"), 
  rowname = str_replace_all(rowname, "rehabilitation_sessions", "rehab_sess")) %>%
  mutate(rowname = ifelse(nchar(rowname) > 75,
                          str_sub(rowname, start = 1L, end = 75L), 
                          rowname)) %>%
  pull(rowname)

health <- read_excel("./data/ocha_unedited/Monthly Health Cluster Indicators Report GZT Jan-Feb 2023.xlsx", 
           sheet = 1) %>% 
  setNames(health_names) 

erl <- read_excel("./data/ocha_unedited/2023-02Feb_ERL_4Ws_NWS - WoS - V03 -WoS Validated.xlsx", 
           sheet = "4Ws") %>% 
  clean_names() %>% 
  rename(admin1pcode = admin1_pcode, 
         admin2pcode = admin2_pcode, 
         admin3pcode = admin3_pcode,
         admin4pcode = admin4_pcode,
         partner_code = implementing_partner, 
         beneficiaries = direct_beneficiaries, 
         previously_assisted = have_you_assisted_same_individual_during_previous_month, 
         conditinality = if_cash_cash_conditionality,
         restrictions = if_cash_cash_restriction, 
         cash_delivery_mechanism = if_cash_cash_delivery_mechanism,
         transfer_value = if_cash_cash_transfer_voucher_value_per_household_usd, 
         frequency = if_cash_cash_frequency)

fsl <- read_xlsb("./data/ocha_edited/FSL_January 2023_5Ws_OCHA_22032023.xlsb", 
           sheet = "5Ws Actuals - Jan 2023") %>% 
  clean_names() %>% 
  rename(admin1pcode = admin1_pcode_do_not_write, 
         admin2pcode = admin2_pcode_do_not_write, 
         admin3pcode = admin3_pcode_do_not_write, 
         admin4pcode = location_pcode_do_not_write, 
         admin5pcode = camp_pcode_do_not_write, 
         transfer_value = value, 
         reported_to_other_sector = has_this_data_been_reported_to_another_sector,
         beneficiaries = x_of_total_beneficiaries_assisted, 
         families = x_of_families_assisted, 
         start_date = starting_date, 
         end_date = ending_date) %>% 
  # Crazy -- this is the first time I've seen the 1904 start date
  mutate_at(vars(start_date, end_date), ~ as.Date(as.numeric(.), origin = "1904-01-01"))

edu_names <- read_excel("./data/ocha_unedited/Gaziantep 4Ws OCHA 2023 EDU.xlsx", 
           sheet = 5) %>% 
  head(1) %>% 
  transpose_df() %>% 
  select(rowname) %>% 
  mutate(rowname = gsub("\\p{Arabic}", "", rowname, perl = TRUE), 
         rowname = str_trim(str_replace_all(rowname, "\r\n", ""))) %>% 
  pull(rowname)


edu <- read_excel("./data/ocha_unedited/Gaziantep 4Ws OCHA 2023 EDU.xlsx", 
           sheet = 5) %>% 
  setNames(edu_names) %>% 
  clean_names() %>% 
  rename(admin1pcode = governorate_pcode, 
         admin2pcode = district_pcode, 
         admin3pcode = sub_district_pcode, 
         admin4pcode = community_pcode, 
         beneficiaries = total_new_individuals, 
         ben_frequencies = total_repeated_beneficiaries_reached, 
         camp_name = if_camp_please_select_the_name_of_the_camp_u_060c, 
         school_name = name_of_school_learning_center, 
         partner_code = implementing_partner_name_or_code)

# nut_names <- read_excel("./data/202207_NC-Full Database - NW-23082022.xlsx", 
#            sheet = "4Ws") %>% 
#   head(1) %>% 
#   transpose_df() %>% 
#   select(rowname) %>% 
#   mutate(rowname = gsub("\\p{Arabic}", "", rowname, perl = TRUE), 
#          rowname = str_trim(str_replace_all(rowname, "\r\n|/|\\\\", ""))) %>% 
#   pull(rowname)

nut <- read_excel("./data/ocha_unedited/NW Syria Nutrition cluster Jan + Feb 4Ws Dataset-Coded04042023.xlsx", 
           sheet = 1) %>% 
  clean_names() %>% 
  rename(admin1pcode = gov_pcode, 
         admin2pcode = dis_pcode, 
         admin3pcode = sub_dis_pcode, 
         admin4pcode = com_pcode,
         partner_code = organisation, 
         camp_name = camp, 
         beneficiaries = total, 
         health_facility_name = health_facility_or_rrt)


prot_names <- read_excel("./data/202207_PRO_EXTERNAL_TXB_Complie_4Ws_2022_r7_v1_220823.xlsx", 
           sheet = "a.4Ws - Data entry sheet", 
           skip = 1) %>%
  head(1) %>% 
  transpose_df() %>% 
  select(rowname) %>% 
  mutate(rowname = gsub("\\p{Arabic}", "", rowname, perl = TRUE), 
         rowname = str_trim(str_replace_all(rowname, "\r\n|/|\\\\|\\*", ""))) %>% 
  pull(rowname)

prot <- read_excel("./data/202207_PRO_EXTERNAL_TXB_Complie_4Ws_2022_r7_v1_220823.xlsx", 
           sheet = "a.4Ws - Data entry sheet", 
           skip = 1) %>%
  setNames(prot_names) %>% 
  clean_names() %>% 
  rename(delivery_modality = delivery_modaity, 
         admin1pcode = code_governorate, 
         admin2pcode = code_district, 
         admin3pcode = code_sub_district, 
         admin4pcode = code_commune_village_town)  
  

```



```{r eval=FALSE}
health %>% glimpse()
  rename(admin1pcode = code_governorate, 
         admin2pcode = code_district, 
         admin3pcode = code_sub_district, 
         admin4pcode = code_community) %>% 
  mutate(frequencies = 
           x1_1_1_number_of_outpatients_consultations + 
           x1_1_2_number_of_trauma_consultations_supported + 
           x1_1_2_1_number_of_hostility_related_trauma_consultations_supported + 
           x1_1_3_number_of_mental_health_consultations_supported + 
           x1_1_4_number_of_physical_rehabilitation_sessions_supported + 
           x1_1_5_number_of_vaginal_deliveries_attended_by_a_skilled_attendant + 
           x1_1_6_number_of_caesarian_sections_supported + 
           x1_1_7_number_of_cases_referred_for_specialized_treatment_between_levels_of_care_inside_syria_cross_)
  
```

```{r}
edu %>% count(activity)
```



# 1. Summary 

In preparation of consolidating and reporting on all cash and voucher-based activities (CVA), not just multipurpose cash, the Cash Working Group has undertaken a review of extant 4W templates to understand their interoperability. 

Interoperability (and adherence to cash reporting standards) is judged by the inclusion of the following data within 4Ws:

* **Admin4**: Data should at least be available at community level
* **Modality**: It is important to understand the breakdown, by cluster, of beneficiaries reached by cash, in-kind and service delivery
* **Delivery mechanism**: It is important to understand how many beneficiaries are reached by direct distributions, as opposed to those reached by agents or money traders
* **Conditionality**
* **Transfer value**
* **Frequency**: It is important to understand how much of the response is comprised of one-off activities vs continuing support

These are the results of the 4Ws interoperability review: 

```{r}
sum_table <- tribble(
  ~cluster, ~admin4, ~modality, ~delivery_mechanism, ~conditionality, ~transfer_value, ~frequency, 
  "Cash", TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,
  "CCCM", TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, 
  "Education", TRUE, FALSE, FALSE, FALSE, FALSE, FALSE,
  "ERL", TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, 
  "FSL", TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, 
  "Health", TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, 
  "Nutrition", TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, 
  "Protection", TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, 
  "SNFI", TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, 
  "WASH", TRUE, FALSE, FALSE, FALSE, TRUE, FALSE
) 

colmatrix <- ifelse(sum_table[, -1] == TRUE, "#cceecc", "#eecccc")

sum_table %>% 
  rename(`Cluster/WG` = cluster) %>% 
  flextable() %>% 
  theme_zebra() %>% 
  bg(j = 2:7, bg=colmatrix) %>% 
  set_table_properties(layout = "autofit", width = .99) %>% 
  set_caption("Review of 4W templates -- alignment with cash reporting standards") %>% 
  footnote(i = 1, j = 1, part = "header",
           as_paragraph("Except Cash, templates reviewed were from 2022"))


```

<br>

Specific recommendations for joining datasets will be listed in the section `Consolidation`. 

However, immediately, were Education, ERL, FSL and SNFI partners to directly provide their 4Ws to the CWG, exactly how they would normally submit it to their Cluster Coordinators and IMs, they could be directly integrated in current CWG reporting with minimal issues. 

<br><br><br>

# 2. Consolidation


### Site-level data and number of unique individuals reached 

The Cash Working Group is interested in the following indicators: 

* The percentage of individuals who have received cash assistance of any kind
* The percentage of individuals who have received multi-purpose cash assistance 
* The percentage of beneficiary frequencies, per cluster and per activity, who have received cash assistance 

Site-level data is necessary for any of these calculations to take place. And the calculation of the number of unique individuals reached is an important figure to all clusters. However, the CWG has no interest in imposing its reporting policy and calculations on other clusters -- this section instead outlines how the CWG intends to process these figures, to document them for public knowledge and for ease of future revision. 

Each cluster should make their own determination in that regard. 

Site-level data is important in calculating the number of unique individuals reached -- this itself is an important figure for the CWG as we work to determine the percentage of beneficiaries who have received assistance through in-kind, cash or service delivery modalities. 

Unique individuals are distinct from beneficiary frequencies -- a family of four receiving cash assistance, hygiene kits and emergency shelter kits represent 12 beneficiary frequencies, but are 4 unique individuals. 

Beneficiary frequencies can be easily determined by summing beneficiaries reached regardless or whether they have been reached before. 

The ideal way to determine the number of unique individuals reached is through an established and maintained beneficiary database. However, this option is not available to us. Whilst various clusters may have different formulae for calculating individuals reached, common approaches include a column asking whether beneficiaries have been previously assisted or taking the highest number reached out of any activity per community then summing those together. 

This second option -- taking the highest number reached, by any activity, at admin4 -- is the best available option to avoid double counting. In fact, there will be usually be some slight undercounting, but seeing as the solution to that would be to push everyone down to reporting at admin5, it would be a lot of effort for marginal gains. 

Site-level (camp, specific location in the community) data is only collected in the following templates:

* WASH: camp pcodes and the specific WASH installations are collected
* FSL: camp pcodes are collected
* Education: camp pcodes and names are available, as are schools and their unique identifier numbers.
* Nutrition: camp pcodes are collected
* Protection: camp pcodes are collected

Shelter and NFIs, Health, ERL and CCCM (again, what they have provided to OCHA is presumably only meant for external parties and missing quite a lot of information) do not collect information on camp and specific locations. 




Shelter beneficiaries are calculated by selecting the highest number of beneficiaries per community. 

<br><br> 

### Coordination and multi-sector footprint

The consolidation of this 4W data creates additional opportunities for inter-cluster coordination. Inter-cluster coordination is not the purview of the Cash Working Group and OCHA is more than capable to making these opportunities for themselves. 

However, it would also be remiss to not mention what new metrics would be available for analysis: 

* The number of clusters per admin4 (useful for determining inter-cluster gaps i.e. are there any areas where we are doing education without shelter? Nutrition without food security?)
* The number of activities per admin4 (similar to above, but more detailed)
* The number of beneficiary frequencies at admin4 (collectively, what has been the level of investment in each community by the humanitarian community as a whole? Important for determining if allocations have been fair i.e. are there communities of similar pre-existing vulnerability and earthquake damage that have received drastically different levels of support?)

Again, inter-cluster coordination is not the purview of the Cash Working Group, but we are happy to share all the code and data with whoever wants to take the lead for that. 

<br><br>


### Beneficiary disaggregations 

<br><br><br>

# 3. Annexes -- 4W templates 

### WASH 

```{r warning = FALSE}


glimpse(wash)
```

```{r eval=FALSE}
wash %>% 
  filter(status_alhalt == "Completed" & !is.na(ngo_code)) %>% 
   select(ngo_code, governorate = gov, district, sub_district, community, 
         admin3pcode = sd_pcode, admin4pcode = com_p_code, camp_pcode, 
         electrical_bills, 
         cash_assistance_water_trucking,
         cash_assistance_private_boreholes,
         hh_water_treatement_cash_assistance, 
         beneficiaries_cash_toilets, 
         cash_bath, 
         cash_hk, 
         cash_wash_nfi,
         cash_total_money_usd) %>%
  filter(admin3pcode %in% nw_pcode3) %>%
  filter(!is.na(cash_assistance_water_trucking))
  count(cash_assistance_private_boreholes)
```


<br>

WASH has multiple cash-response activities, including assistance with electric bills, cash assistance for water trucking and even subsidies for toilet construction. 

However, their 4Ws is missing most of the quality and design-related columns, such as conditionality and cash delivery mechanism. The CWG is strongly encouraged to advocate for the necessary changes to WASH's template. 

<br><br><br>

### CCCM        

```{r}

glimpse(cccm)
```

It is not currently possible to integrate CCCM's 4W submissions into an inter-cluster template. However, it is also unclear if any of CCCM's activities have cash components. 

It is unlikely that the template provided to OCHA for reporting purposes is the actual template being used inside CCCM -- a data-sharing agreement will need to be reached in order for the CWG to fully understand the data that CCCM is managing. 

<br><br><br> 

### Shelter

```{r}


glimpse(snfi)
  
```

<br> 

The Shelter/NFI 4Ws are almost interoperable with the CWG 4Ws, containing columns on the delivery modality (cash, in-kind and voucher), cash conditionality, the transfer value per household and the cash delivery mechanism. However, payment frequency is missing. 

```{r eval=FALSE}
snfi %>% 
  filter(delivery_modality != "END_OF_FORMULA") %>% 
  group_by(delivery_modality, cash_delivery_mechanism) %>% 
  summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) 
```

Shelter has quite a good list of cash delivery mechanism options:
-Cash-for-work
-Direct cash payment
-E-transfer
-Money transfer agent
-Paper voucher
-Other


### Health 

```{r}

health %>% glimpse()
```

Health 4Ws are useful contain community pcodes and are therefore interoperable from a geographic coverage and gaps standpoint. However, the template lacks key columns necessary for cash analysis. A `delivery modality` column exists, but has no options. There are no columns for conditionality or dollar value of interventions. 

### ERL 

```{r}


erl %>% glimpse()
```

```{reval=FALSE}
erl %>% 
  filter(delivery_modality == "Cash") %>% 
  count(indicator_unit)
  group_by(deliver_mechanism = if_cash_cash_delivery_mechanism) %>% 
  summarise(beneficiaries = sum(total_beneficiaries) )
```


ERL 4Ws are fully interoperable with CWG's 4Ws. Delivery modality is available, so is conditionality, frequency of distribution, delivery mechanism and transfer value per household. 

Unique beneficiaries are available, with a separate column,

ERL and FSL are the only clusters to ask if data has been reported to other Clusters. Whilst still not 

However, no partner has a column asking if beneficiaries have received assistance from any other cluster. 

### FSL 

```{r}


fsl %>% 
  mutate_at(vars(start_date, end_date), ~ as.Date(as.numeric(.), origin = "1904-01-01")) %>% 
  select(start_date, end_date)


```

FSL's template, unsurprisingly, is also in full alignment with standard cash reporting standards and there will be no problems integrating their data into the Cash 4Ws. FSL 4Ws are fully interoperable.  

<br><br><br>

### Education 

```{r}

edu %>% glimpse()

```


Education has at least two activities with cash components: 

* *1.07.12 Provide maintenance and running costs, including cleaning material, stationery*`*
* *2.02.2 Provide teachers and education personnel with monetary and non-monetary incentives. This including, pre-paid cards/vouchers, transportation allowance, financial payment, etc. to carry out education services in non-formal settings*

There is nowhere in the template to record either the amount of funding disbursed, the frequency or any of the other associated cash-reporting columns. The Education 4Ws, in their current form, are not interoperable with the CWG's template at all, though they can still be used to determine the education caseload per community. 


### Nutrition 

```{r}


glimpse(nut)
```

<br> 

Nutrition's 4W dataset is largely interoperable with CWG's, having all relevant cash reporting columns. The only column missing is `delivery modality`, which can largely be determined from activity descriptions and units of measurement used. To introduce a new column, assigning each row to either `cash`, `in-kind` or `service delivery` is definitely possible and does not require the template to be altered as it can be done as part of the data cleaning process, though it would be preferable for the Cluster to make that amendment themselves. 

<br><br><br>

### Protection 

```{r}

glimpse(prot)

```

```{r}
prot %>% 
  filter(activity == "Cash assistance - GP7") %>% 
  summarise(beneficiaries = sum(total_achieved_as_per_the_unit_in_the_previous_field, na.rm = TRUE))

prot %>% count(delivery_modality)
```


Protection is only very partially interoperable with the CWG 4Ws. They do ask for `delivery modality` but transfer values, conditionality and transfer frequency are unknown. 





















