---
title: "Untitled"
output: html_document
date: '2023-05-18'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE, fig.retina = 2)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(scales)
library(magrittr)
library(viridis)
library(patchwork)
library(DT)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(magrittr)
library(readxlsb)
library(tidymodels)
library(widyr)
library(tidytext)
library(treemapify)
library(mdepriv)

theme_set(theme_light())

# disabling scientific notation
options(scipen = 100)

# pander tables all in one row
panderOptions('table.split.table', Inf)

# pander thousands separator
panderOptions("big.mark", ",")

# replace 
opts <- options(knitr.kable.NA = "")

`%out%` <- Negate(`%in%`)

# function for transposing df
transpose_df <- function(df) {
  t_df <- data.table::transpose(df)
  colnames(t_df) <- rownames(df)
  rownames(t_df) <- colnames(df)
  t_df <- t_df %>%
    tibble::rownames_to_column(.data = .) %>%
    tibble::as_tibble(.)
  return(t_df)
}

# scaling functions 
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}

#mode function 
mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

```

```{r data}
pcode3_shape <- 
  sf::st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp", 
          quiet = TRUE)

nw_pcode3 <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1, 
                  sheet = 1) %>%
  clean_names() %>% 
  filter(ao_c == "NW") %>% 
  pull(admin3pcode)

locations <- read_excel("./data/Locations.xlsx") %>% 
  clean_names()

pop <- read_excel("./data/Population_Data_May_2022_final_01122022_with_SADD.xlsx", 
           sheet = 5, 
           skip = 2) %>% 
  clean_names() %>% 
  select(admin0name_en:longitude_x, 
         final_est_of_id_ps_may_2022:family_avg_size_total_pop) %>% 
  rename(idps = final_est_of_id_ps_may_2022, 
         total_pop = final_est_of_total_pop_may_2022, 
         avg_family_size = family_avg_size_total_pop) %>% 
  filter(admin3pcode %in% nw_pcode3)

names_eq <- c(
  "date",
  "governorate",
  "district",
  "sub_district",
  "community",
  "admin4pcode",
  "casualties",
  "injuries",
  "completely_destroyed_houses",
  "damaged_unihabitable_houses",
  "temporary_accommodation_centres",
  "idps_in_all_centres",
  "schools_as_accomodation_centres",
  "idps_in_schools",
  "tents_needed",
  "blankets_mattresses_needed",
  "temporary_accommodation_centres_available", 
  "accessible_civil_defense",
  "latrines_available",
  "meals_needed_per_day",
  "need_blood_donations",
  "health_services_available",
  "necessary_medical_equipment",
  "rubble_volunteers",
  "telecoms_available",
  "electricity_available", 
  "heating_fuel_needed"
)

eq <- read_excel("./data/syria-earthquake-impact-20-march-2023.xlsx",
                 sheet = "DATASET") %>% 
  setNames(names_eq) %>% 
  left_join(pop %>% 
              select(admin4pcode, total_pop), 
            by = "admin4pcode") %>% 
  mutate(wounded_dead = casualties + injuries,
             damaged_houses = completely_destroyed_houses + damaged_unihabitable_houses) %>% 
  mutate(wounded_dead_100k = wounded_dead / total_pop * 100000, 
         damaged_houses_100k = damaged_houses / total_pop * 100000)

com <- read_csv("./data/com20230519.csv")

hno <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", 
                  skip = 1, 
                  sheet = 1) %>%
  clean_names() %>% 
  rename(severity = x2023_hno_inter_sector_severity) %>% 
  left_join(read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", 
                       skip = 1,
                       sheet = "Sector dataset") %>%
              clean_names() %>%
              select(shelter_severity:wash_severity, admin3pcode), 
            by = "admin3pcode")

eq_score <- eq %>%
  filter(!is.infinite(wounded_dead_100k) & !is.infinite(damaged_houses_100k)) %>% 
  mutate_at(vars(wounded_dead, damaged_houses, 
                 wounded_dead_100k, damaged_houses_100k), ~ range_wna(.)) %>% 
  replace_na(list(wounded_dead_100k = 0, 
                  damaged_houses_100k = 0, 
                  wounded_dead = 0, 
                  damaged_houses = 0)) %>%  
  mdepriv(c("wounded_dead", "damaged_houses", 
            "wounded_dead_100k", "damaged_houses_100k"), 
          method = "bv", output = "all", 
          score_i_heading = "eq_score")

reference_table <- com %>% 
  filter(project_status %in% c("Completed", "Ongoing") & 
           activity %out% c("ISIMM")) %>% 
  group_by(admin4pcode) %>% 
  slice(which.max(beneficiaries)) %>% 
  ungroup() %>% 
  select(admin1pcode, admin2pcode, admin3pcode, admin4pcode, 
         beneficiaries) %>% 
  left_join(com %>%
              filter(project_status %in% c("Completed", "Ongoing") &
                       activity %out% c("ISIMM")) %>%
              group_by(admin4pcode) %>% 
              summarise(beneficiary_frequencies = sum(beneficiaries, na.rm = TRUE), 
                        clusters = n_distinct(cluster, na.rm = TRUE)), 
            by = "admin4pcode") %>% 
  right_join(pop %>% select(total_pop, admin4pcode), 
             by = "admin4pcode") %>% 
  left_join(eq %>% 
              select(wounded_dead, 
                     wounded_dead_100k, 
                     damaged_houses, 
                     damaged_houses_100k, 
                     admin4pcode), 
            by = "admin4pcode") %>% 
  left_join(eq_score$data %>% 
              select(eq_score, admin4pcode), 
            by = "admin4pcode")

```

# Alternate calculations 

```{r}
eq_admin3 <- read_excel("./data/syria-earthquake-impact-20-march-2023.xlsx",
                 sheet = "DATASET") %>% 
  setNames(names_eq) %>% 
  left_join(locations %>% select(admin4pcode, admin3pcode), 
            by = c("admin4pcode")) %>% 
  mutate(wounded_dead = casualties + injuries,
             damaged_houses = completely_destroyed_houses + damaged_unihabitable_houses) %>% 
      group_by(admin3pcode) %>% 
      summarise(wounded_dead = sum(wounded_dead, na.rm = TRUE), 
                damaged_houses = sum(damaged_houses, na.rm = TRUE)) %>% 
  left_join(read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1, 
                  sheet = 1) %>%
              clean_names() %>%
              select(admin3pcode, total_population, aoc = ao_c), 
            by = "admin3pcode") %>% 
  mutate(wounded_dead_100k = wounded_dead / total_population * 100000, 
         damaged_houses_100k = damaged_houses / total_population * 100000) %>% 
  mutate_at(vars(wounded_dead, damaged_houses, 
                 wounded_dead_100k, damaged_houses_100k), ~ range_wna(.)) %>% 
  mdepriv(c("wounded_dead", "damaged_houses", 
            "wounded_dead_100k", "damaged_houses_100k"), 
          method = "cz", output = "all", 
          score_i_heading = "eq_score_admin3")

alt_severity <- hno %>% 
  select(admin3pcode, shelter_severity:wash_severity) %>%
  mutate(protection_gbv_severity = as.numeric(protection_gbv_severity)) %>% 
  # All missing data replaced with 0
  replace(is.na(.), 0) %>% 
  mutate_at(vars(shelter_severity:wash_severity), ~ range_wna(.)) %>% 
  mdepriv(c("shelter_severity", "education_severity", "nutrition_severity", 
            "nfi_severity", "erl_severity", "health_severity", 
            "protection_severity", "protection_cp_severity", "protection_gbv_severity", 
            "protection_ma_severity", "food_severity", "cccm_severity", "wash_severity"), 
          method = "cz", output = "all", 
          score_i_heading = "alt_severity")

access <- 
  read_excel("C:/Users/seanywng/OneDrive/Cloud_Docs/Syria/Data Entry Form_Access Severity Syria - NWS- September 2022.xlsx",
             skip = 1, 
             sheet = "SNGOs") %>% 
  clean_names() %>% 
  rename(admin3pcode = pcode) %>% 
  mutate_at(vars(denial_of_the_existence_of_humanitarian_needs_or_of_entitlements_to_humanitarian_assistance:
                   restrictions_on_or_obstruction_of_conflict_affected_populations_access_to_services_and_assistance), 
            ~ ifelse(. == "x", 1, .)) %>% 
  replace_na(list(
    denial_of_the_existence_of_humanitarian_needs_or_of_entitlements_to_humanitarian_assistance = 0, 
    restriction_of_movement_of_agencies_personnel_or_goods_into_the_affected_country =  0, 
    restriction_of_movement_of_agencies_personnel_or_goods_within_the_affected_country = 0,
    military_operations_and_ongoing_hostilities_impeding_humanitarian_operations = 0, 
    violence_against_humanitarian_personnel_assets_and_facilities = 0, 
    interference_in_the_implementation_of_humanitarian_activities= 0, 
    presence_of_ie_ds_mines_and_ux_os = 0, 
    physical_environment = 0, 
    restrictions_on_or_obstruction_of_conflict_affected_populations_access_to_services_and_assistance = 0
  )) %>% 
  mutate_at(vars(denial_of_the_existence_of_humanitarian_needs_or_of_entitlements_to_humanitarian_assistance,
                 violence_against_humanitarian_personnel_assets_and_facilities), 
            ~ as.numeric(.))

alt_access <- access %>% 
  select(admin3pcode, 
         denial_of_the_existence_of_humanitarian_needs_or_of_entitlements_to_humanitarian_assistance:
           restrictions_on_or_obstruction_of_conflict_affected_populations_access_to_services_and_assistance) %>% 
  mdepriv(c("restriction_of_movement_of_agencies_personnel_or_goods_into_the_affected_country", 
            "restriction_of_movement_of_agencies_personnel_or_goods_within_the_affected_country", 
            "military_operations_and_ongoing_hostilities_impeding_humanitarian_operations", 
            "interference_in_the_implementation_of_humanitarian_activities", 
            "presence_of_ie_ds_mines_and_ux_os", 
            "physical_environment", 
            "restrictions_on_or_obstruction_of_conflict_affected_populations_access_to_services_and_assistance"), 
          method = "cz", output = "all", 
          score_i_heading = "alt_access")

check <- com %>% 
  filter(!is.na(admin4pcode) & activity != "ISIMM" & 
           project_status %in% c("Completed", "Ongoing") & 
           beneficiaries > 0) %>% 
  group_by(admin4pcode) %>% 
  slice(which.max(beneficiaries)) %>% 
  ungroup() %>% 
  group_by(admin3pcode) %>% 
  summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>% 
  right_join(hno %>% 
              select(admin3pcode, severity, nws_pin), 
            by = "admin3pcode") %>% 
  right_join(pop %>% 
              group_by(admin3pcode) %>% 
              summarise(population = sum(total_pop, na.rm = TRUE), 
                        .groups = "drop"), 
             by = "admin3pcode") %>% 
  left_join(com %>% 
              filter(!is.na(admin4pcode) & activity != "ISIMM" &
                       project_status %in% c("Completed", "Ongoing")) %>%
              group_by(admin3pcode) %>% 
              summarise(frequencies = sum(beneficiaries, na.rm = TRUE),
                        clusters = n_distinct(cluster, na.rm = TRUE), 
                        .groups = "drop"), 
            by = "admin3pcode") %>% 
  left_join(eq_admin3$data %>% 
              select(admin3pcode, eq_score_admin3), 
            by = "admin3pcode") %>% 
  left_join(alt_severity$data %>% 
              select(admin3pcode, alt_severity), 
            by = "admin3pcode") %>% 
  left_join(access %>% 
              select(admin3pcode, access_score = three_point_severity_score), 
            by = "admin3pcode") %>% 
  left_join(alt_access$data %>% 
              select(alt_access, admin3pcode), 
            by = "admin3pcode") %>%
  mutate(pc_reached = frequencies / population,
         coverage = beneficiaries / population)  


```

```{r}
com %>% 
  group_by(admin3pcode) %>% 
  summarise(clusters = n_distinct(cluster)) %>% 
  arrange(desc(clusters))

locations %>% 
  filter(admin3name_en == "Badama") %>% distinct(admin3pcode)

check %>% 
  filter(admin3pcode %in% c("SY070401"))

com %>% 
  filter(activity != "ISIMM" & beneficiaries > 0) %>% 
  filter(admin3pcode %in% c("SY070401")) %>% 
  group_by(cluster, activity) %>% 
  summarise(beneficiaries = sum(beneficiaries))
```


# Maps

### Severity standard

```{r fig.retina=2}
check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = severity)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70", 
               trans = "log") +
  scale_fill_viridis(breaks = c(3, 4, 5)) +
  labs(title = "Severity score by sub-district") + 
  theme_void() + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) + 
  
check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = access_score)) +
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70") +
  scale_fill_viridis(breaks = c(1, 2, 3)) + 
  labs(title = "Access score by sub-district") + 
  theme_void() + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) + 
  

check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = clusters)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70", 
               trans = "log") +
  scale_fill_viridis(breaks = c(1,  3,  6, 9)) +
  theme_void() + 
  labs(title = "Number of clusters/working groups by sub-district") + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) + 
  
check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = beneficiaries)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70") +
  scale_fill_viridis(trans = "log", 
                     labels = comma,
                     breaks = c(10, 100, 1000, 10000, 100000)) +
  theme_void() +  
  labs(title = "Unique individuals reached by sub-district") + 
  theme(plot.background = element_rect(fill = "white", colour = NA))  
  

ggsave("./img/severity_standard.png", dpi = 300, height = 11.7, width = 16.5, units = "in")
  
```


```{r fig.retina=2}
check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = alt_severity)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70", 
               trans = "log") +
  scale_fill_viridis() +
  labs(title = "Severity score (alternate calculation) by sub-district") + 
  theme_void() + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) + 
  
check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = alt_access)) +
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70") +
  scale_fill_viridis() + 
  labs(title = "Access score (alternate calculation) by sub-district") + 
  theme_void() + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) + 
  

check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = pc_reached)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70", 
               trans = "log") +
  scale_fill_viridis(labels = percent) +
  theme_void() + 
  labs(title = "Beneficiary frequencies as % of population by sub-district", 
       fill = "frequencies/\npopulation") + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) + 
  
check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = beneficiaries)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70") +
  scale_fill_viridis(trans = "log", 
                     labels = comma,
                     breaks = c(10, 100, 1000, 10000, 100000)) +
  theme_void() +  
  labs(title = "Unique individuals reached by sub-district") + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) 

ggsave("./img/severity_alternate.png", dpi = 300, height = 11.7, width = 16.5, units = "in")
```

### Severity frequencies

```{r fig.retina=2}
check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = severity)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70", 
               trans = "log") +
  scale_fill_viridis(breaks = c(3, 4, 5)) +
  labs(title = "Severity score by sub-district") + 
  theme_void() + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) + 
  
check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = population)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70") +
  scale_fill_viridis(trans = "log", 
                     labels = comma,
                     breaks = c(10, 100, 1000, 10000, 100000, 1000000)) +
  theme_void() +  
  labs(title = "Population by sub-district") + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) + 
  

check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = pc_reached)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70", 
               trans = "log") +
  scale_fill_viridis(labels = percent, trans = "log10") +
  theme_void() + 
  labs(title = "Beneficiary frequencies as % of population by sub-district", 
       fill = "frequencies/\npopulation") + 
  theme(plot.background = element_rect(fill = "white", colour = NA)) + 
  
check %>% 
  left_join(pcode3_shape,
            by = c("admin3pcode" = "ADM3_PCODE")) %>% 
  filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") & !is.na(nws_pin)) %>% 
  st_as_sf() %>%
  ggplot() + 
  geom_sf(size = .1, colour = "grey70", 
          aes(fill = frequencies)) + 
  geom_sf_text(aes(label = ADM3_EN), size = 2, colour = "grey70") +
  scale_fill_viridis(trans = "log", 
                     labels = comma,
                     breaks = c(10, 100, 1000, 10000, 100000, 1000000)) +
  theme_void() +  
  labs(title = "Beneficiary frequencies by sub-district") + 
  theme(plot.background = element_rect(fill = "white", colour = NA))  
  

ggsave("./img/severity_frequencies.png", dpi = 300, height = 11.7, width = 16.5, units = "in")

```

```{r}

# Not a bad correlation 
# But very low R-squared

# Really there isn't enough variation in the dataset, or enough points 
check %>% 
  lm(frequencies ~ access_score, data = .) %>% 
  summary()

check %>% 
  select(access_score, frequencies) %>% 
      cor(method = "spearman", 
          use = "pairwise.complete.obs") 
```

# Correlations 

```{r}
check %>% 
  lm(pc_reached ~ alt_access, data = .) %>% 
  summary()

check %>% 
  select(alt_access, pc_reached) %>% 
      cor(method = "spearman", 
          use = "pairwise.complete.obs")

check %>% 
  lm(pc_reached ~ alt_access, data = .) %>% 
  summary()

# Not a statistically significant relationship
check %>% 
  lm(pc_reached ~ severity, data = .) %>% 
  summary()

# Fairly weak correlation too
check %>% 
  select(alt_severity, pc_reached) %>% 
      cor(method = "spearman", 
          use = "pairwise.complete.obs")

# Frequencies are extremely predictive of population 
check %>% 
  lm(frequencies ~ population, data = .) %>% 
  summary()

check %>% 
  select(population, frequencies) %>% 
      cor(method = "spearman", 
          use = "pairwise.complete.obs")
```

```{r}
com %>% 
  filter(project_status %in% c("Completed", "Ongoing") & 
           activity %out% c("ISIMM")) %>%
  group_by(admin4pcode) %>%
             slice(which.max(beneficiaries)) %>%
             ungroup() %>%
  {sum(.$beneficiaries)}

com_old %>% 
  filter(project_status %in% c("Completed", "Ongoing") & 
           activity %out% c("ISIMM")) %>%
  group_by(admin4pcode) %>%
             slice(which.max(beneficiaries)) %>%
             ungroup() %>%
  {sum(.$beneficiaries)}
```

# Admin4 dataseet

```{r}
com %>% 
  filter(project_status %in% c("Completed", "Ongoing") & 
           activity %out% c("ISIMM") & beneficiaries > 0) %>% 
  group_by(admin4pcode, cluster) %>% 
  summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>% 
  ungroup() %>%  
  pivot_wider(names_from = cluster, values_from = beneficiaries) %>% 
  right_join(pop %>% select(total_pop, admin4pcode), 
             by = "admin4pcode") %>% 
  left_join(locations %>% 
              select(governorate = admin1name_en, 
                     district = admin2name_en, 
                     sub_district = admin3name_en, 
                     community = location_name_en, 
                     admin4pcode), 
            by = "admin4pcode") %>%
  left_join(com %>% 
              filter(project_status %in% c("Completed", "Ongoing") & 
                       activity %out% c("ISIMM")) %>%
             group_by(admin4pcode) %>%
             slice(which.max(beneficiaries)) %>%
             ungroup() %>%
             select(beneficiaries, admin4pcode), 
           by = "admin4pcode") %>% 
  mutate(beneficiaries = ifelse(beneficiaries == 0, NA_integer_, beneficiaries)) %>% 
   left_join(com %>%
              filter(project_status %in% c("Completed", "Ongoing") &
                       activity %out% c("ISIMM") & beneficiaries > 0) %>%
              group_by(admin4pcode) %>% 
              summarise(beneficiary_frequencies = sum(beneficiaries, na.rm = TRUE),
                        clusters = n_distinct(cluster, na.rm = TRUE)), 
            by = "admin4pcode") %>% 
  right_join(pop %>% select(population = total_pop, admin4pcode), 
             by = "admin4pcode") %>% 
  left_join(eq %>% 
              select(wounded_dead, 
                     wounded_dead_100k, 
                     damaged_houses, 
                     damaged_houses_100k, 
                     admin4pcode), 
            by = "admin4pcode") %>% 
  left_join(eq_score$data %>% 
              select(eq_score, admin4pcode), 
            by = "admin4pcode") %>% 
  mutate(pc_reached = beneficiary_frequencies / population, 
         pc_reached = ifelse(is.infinite(pc_reached), 
                             NA_integer_, 
                             pc_reached)) %>% 
  mutate_at(vars(wounded_dead_100k, damaged_houses_100k), 
            ~ round(., digits = 1)) %>% 
  mutate_at(vars(eq_score, pc_reached), ~ round(., digits = 3)) %>% 
  select(governorate, district, sub_district, community, admin4pcode, 
         beneficiaries, beneficiary_frequencies, clusters, eq_score, population = total_pop, pc_reached, 
         wounded_dead, wounded_dead_100k, damaged_houses, damaged_houses_100k, 
         CWG, Education, FSL, Nutrition, Protection, SNFI, WASH, CCCM, ERL) %>% 
    write_csv("./data/admin4_prioritisation.csv")
  
  

```

```{r}
com %>% 
  filter(admin4pcode %in% c("C4149")) %>% 
  group_by(cluster) %>% 
  summarise(beneficiaries = sum(beneficiaries)) %>% 
  arrange(desc(beneficiaries))



com %>% 
  filter(admin4pcode %in% c("C4148")) %>%
  filter(activity == "Multipurpose cash")
  
pop %>% filter(admin4pcode == "C4149") %>% pull(total_pop)

com %>% filter(activity == "Bread/Flour distribution" & 
                 admin4pcode == "C4141") 

com %>% glimpse()
```








