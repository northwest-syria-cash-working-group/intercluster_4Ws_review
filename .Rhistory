geom_point(aes(size = wounded_dead_100k,
colour = beneficiaries)) +
geom_text_repel(aes(label = sub_district),
point.padding = .5,
segment.color = "grey50", size = 3) +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma) +
scale_colour_viridis(labels = comma, trans = "log") +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
labs(x = "Number of damaged houses",
y = "Number of wounded and dead",
title = "Magnitude of earthquake impacts by sub-district",
subtitle = "Size shows intensity (wounded/dead per 100k) and colour shows beneficiaries",
size = "Wounded/dead\nper 100k",
colour = "Beneficiaries",
caption = "Data from CWG, FSL and ACU")
com %>%
filter(activity != "ISIMM" & project_status %in% c("Completed", "Ongoing")) %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
clusters = n_distinct(cluster)) %>%
left_join(pop %>%
group_by(admin3pcode) %>%
summarise(total_pop = sum(total_pop)),
by = "admin3pcode") %>%
left_join(eq %>%
left_join(locations %>%
distinct(admin3pcode, admin4pcode),
by = "admin4pcode") %>%
group_by(admin3pcode) %>%
summarise(wounded_dead = sum(wounded_dead),
damaged_houses = sum(damaged_houses),
.groups = "drop"),
by = "admin3pcode") %>%
mutate(wounded_dead_100k = round(wounded_dead / total_pop * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / total_pop * 100000, digits = 2)) %>%
left_join(locations %>%
distinct(admin3pcode, admin3name_en),
by = "admin3pcode") %>%
rename(sub_district = admin3name_en) %>%
ggplot(aes(x = damaged_houses, y = damaged_houses_100k)) +
geom_point(aes(size = wounded_dead_100k,
colour = beneficiaries)) +
geom_text_repel(aes(label = sub_district),
point.padding = .5,
segment.color = "grey50", size = 3) +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma) +
scale_colour_viridis(labels = comma, trans = "log") +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
labs(x = "Number of damaged houses",
y = "Number of wounded and dead",
title = "Magnitude of earthquake impacts by sub-district",
subtitle = "Size shows intensity (wounded/dead per 100k) and colour shows beneficiaries",
size = "Wounded/dead\nper 100k",
colour = "Beneficiaries",
caption = "Data from CWG, FSL and ACU")
com %>%
filter(activity != "ISIMM" & project_status %in% c("Completed", "Ongoing")) %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
clusters = n_distinct(cluster)) %>%
left_join(pop %>%
group_by(admin3pcode) %>%
summarise(total_pop = sum(total_pop)),
by = "admin3pcode") %>%
left_join(eq %>%
left_join(locations %>%
distinct(admin3pcode, admin4pcode),
by = "admin4pcode") %>%
group_by(admin3pcode) %>%
summarise(wounded_dead = sum(wounded_dead),
damaged_houses = sum(damaged_houses),
.groups = "drop"),
by = "admin3pcode") %>%
mutate(wounded_dead_100k = round(wounded_dead / total_pop * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / total_pop * 100000, digits = 2),
pc_reached = beneficiaries / total_pop) %>%
left_join(locations %>%
distinct(admin3pcode, admin3name_en),
by = "admin3pcode") %>%
rename(sub_district = admin3name_en) %>%
ggplot(aes(x = damaged_houses_100k, y = wounded_dead_100k)) +
geom_point(aes(size = beneficiaries,
colour = total_pop)) +
geom_text_repel(aes(label = sub_district),
point.padding = .5,
segment.color = "grey50", size = 3) +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma) +
scale_colour_viridis(labels = comma, trans = "log") +
#scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
labs(x = "Number of damaged houses",
y = "Number of wounded and dead",
title = "Magnitude of earthquake impacts by sub-district",
subtitle = "Size shows intensity (wounded/dead per 100k) and colour shows beneficiaries",
size = "Wounded/dead\nper 100k",
colour = "Beneficiaries",
caption = "Data from CWG, FSL and ACU")
com %>%
filter(activity != "ISIMM" & project_status %in% c("Completed", "Ongoing")) %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
clusters = n_distinct(cluster)) %>%
left_join(pop %>%
group_by(admin3pcode) %>%
summarise(total_pop = sum(total_pop)),
by = "admin3pcode") %>%
left_join(eq %>%
left_join(locations %>%
distinct(admin3pcode, admin4pcode),
by = "admin4pcode") %>%
group_by(admin3pcode) %>%
summarise(wounded_dead = sum(wounded_dead),
damaged_houses = sum(damaged_houses),
.groups = "drop"),
by = "admin3pcode") %>%
mutate(wounded_dead_100k = round(wounded_dead / total_pop * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / total_pop * 100000, digits = 2),
pc_reached = beneficiaries / total_pop) %>%
left_join(locations %>%
distinct(admin3pcode, admin3name_en),
by = "admin3pcode") %>%
rename(sub_district = admin3name_en) %>%
ggplot(aes(x = damaged_houses_100k, y = wounded_dead_100k)) +
geom_point(aes(size = beneficiaries,
colour = pc_reached)) +
geom_text_repel(aes(label = sub_district),
point.padding = .5,
segment.color = "grey50", size = 3) +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma) +
scale_colour_viridis(labels = percent, trans = "log") +
#scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
labs(x = "Number of damaged houses",
y = "Number of wounded and dead",
title = "Magnitude of earthquake impacts by sub-district",
subtitle = "Size shows intensity (wounded/dead per 100k) and colour shows beneficiaries",
size = "Wounded/dead\nper 100k",
colour = "Beneficiaries",
caption = "Data from CWG, FSL and ACU")
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE, fig.retina = 2)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(magrittr)
library(viridis)
library(patchwork)
library(DT)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(tidymodels)
library(widyr)
library(tidytext)
library(treemapify)
library(mdepriv)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# Hopefully this allows the DT to show up
options(htmltools.preserve.raw = FALSE)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
pcode3_shape <-
sf::st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
nw_pcode3 <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1,
sheet = 1) %>%
clean_names() %>%
filter(ao_c == "NW") %>%
pull(admin3pcode)
# %>%
#   append(list("SY080400", "SY110202", "SY110200", "SY110201"))
locations <- read_csv("./data/locations_aoc.csv")
pop <- read_excel("./data/Population_Data_May_2022_final_01122022_with_SADD.xlsx",
sheet = 5,
skip = 2) %>%
clean_names() %>%
select(admin0name_en:longitude_x,
final_est_of_id_ps_may_2022:family_avg_size_total_pop) %>%
rename(idps = final_est_of_id_ps_may_2022,
total_pop = final_est_of_total_pop_may_2022,
avg_family_size = family_avg_size_total_pop) %>%
filter(admin3pcode %in% nw_pcode3)
names_eq <- c(
"date",
"governorate",
"district",
"sub_district",
"community",
"admin4pcode",
"casualties",
"injuries",
"completely_destroyed_houses",
"damaged_unihabitable_houses",
"temporary_accommodation_centres",
"idps_in_all_centres",
"schools_as_accomodation_centres",
"idps_in_schools",
"tents_needed",
"blankets_mattresses_needed",
"temporary_accommodation_centres_available",
"accessible_civil_defense",
"latrines_available",
"meals_needed_per_day",
"need_blood_donations",
"health_services_available",
"necessary_medical_equipment",
"rubble_volunteers",
"telecoms_available",
"electricity_available",
"heating_fuel_needed"
)
eq <- read_excel("./data/syria-earthquake-impact-20-march-2023.xlsx",
sheet = "DATASET") %>%
setNames(names_eq) %>%
left_join(pop %>%
select(admin4pcode, total_pop),
by = "admin4pcode") %>%
mutate(wounded_dead = casualties + injuries,
damaged_houses = completely_destroyed_houses + damaged_unihabitable_houses) %>%
mutate(wounded_dead_100k = wounded_dead / total_pop * 100000,
damaged_houses_100k = damaged_houses / total_pop * 100000)
com <- read_csv("./data/com20230522.csv") %>%
filter(beneficiaries > 0) %>%
mutate(cluster = ifelse(cluster == "Cash", "CWG", cluster))
hno <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx",
skip = 1,
sheet = 1) %>%
clean_names() %>%
rename(severity = x2023_hno_inter_sector_severity) %>%
left_join(read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx",
skip = 1,
sheet = "Sector dataset") %>%
clean_names() %>%
select(shelter_severity:wash_severity, admin3pcode),
by = "admin3pcode")
eq_score_admin3 <- read_excel("./data/syria-earthquake-impact-20-march-2023.xlsx",
sheet = "DATASET") %>%
setNames(names_eq) %>%
left_join(pop %>%
select(admin4pcode, total_pop),
by = "admin4pcode") %>%
mutate(wounded_dead = casualties + injuries,
damaged_houses = completely_destroyed_houses + damaged_unihabitable_houses) %>%
mutate(wounded_dead_100k = wounded_dead / total_pop * 100000,
damaged_houses_100k = damaged_houses / total_pop * 100000) %>%
filter(!is.infinite(wounded_dead_100k) & !is.infinite(damaged_houses_100k)) %>%
mutate_at(vars(wounded_dead, damaged_houses,
wounded_dead_100k, damaged_houses_100k), ~ range_wna(.)) %>%
replace_na(list(wounded_dead_100k = 0,
damaged_houses_100k = 0,
wounded_dead = 0,
damaged_houses = 0)) %>%
mdepriv(c("wounded_dead", "damaged_houses",
"wounded_dead_100k", "damaged_houses_100k"),
method = "bv", output = "all",
score_i_heading = "eq_score_admin3")
eq_score <- eq %>%
filter(!is.infinite(wounded_dead_100k) & !is.infinite(damaged_houses_100k)) %>%
mutate_at(vars(wounded_dead, damaged_houses,
wounded_dead_100k, damaged_houses_100k), ~ range_wna(.)) %>%
replace_na(list(wounded_dead_100k = 0,
damaged_houses_100k = 0,
wounded_dead = 0,
damaged_houses = 0)) %>%
mdepriv(c("wounded_dead", "damaged_houses",
"wounded_dead_100k", "damaged_houses_100k"),
method = "bv", output = "all",
score_i_heading = "eq_score")
reference_table <- com %>%
filter(project_status %in% c("Completed", "Ongoing") &
activity %out% c("ISIMM")) %>%
group_by(admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
select(admin1pcode, admin2pcode, admin3pcode, admin4pcode,
beneficiaries) %>%
left_join(com %>%
filter(project_status %in% c("Completed", "Ongoing") &
activity %out% c("ISIMM")) %>%
group_by(admin4pcode) %>%
summarise(beneficiary_frequencies = sum(beneficiaries, na.rm = TRUE),
clusters = n_distinct(cluster, na.rm = TRUE)),
by = "admin4pcode") %>%
right_join(pop %>% select(total_pop, admin4pcode),
by = "admin4pcode") %>%
left_join(eq %>%
select(wounded_dead,
wounded_dead_100k,
damaged_houses,
damaged_houses_100k,
admin4pcode),
by = "admin4pcode") %>%
left_join(eq_score$data %>%
select(eq_score, admin4pcode),
by = "admin4pcode")
report_date <- "19 May 2023"
com %>%
filter(activity != "ISIMM" & project_status %in% c("Completed", "Ongoing")) %>%
group_by(admin4pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
clusters = n_distinct(cluster)) %>%
left_join(pop %>% select(total_pop, admin4pcode, community = admin4name_en),
by = "admin4pcode") %>%
mutate(pc_ben = beneficiaries / sum(beneficiaries),
pc_pop = total_pop / sum(total_pop, na.rm = TRUE)) %>%
filter(beneficiaries > 0) %>%
ggplot(aes(x = total_pop, y = beneficiaries)) +
annotate(geom = "rect",
xmin = 3917, xmax = 249009,
ymin = 350700, ymax = 1983254,
colour = "goldenrod", alpha = 0) +
geom_point(aes(size = beneficiaries,
colour = clusters),
alpha = .7) +
scale_colour_viridis(option = "mako", direction = -1,
breaks = c(1, 3, 6, 9)) +
scale_size_continuous(breaks = c(100, 1000, 10000, 100000, 300000, 750000),
labels = comma) +
scale_x_log10(labels = comma, breaks = c(10, 100, 1000, 10000, 100000, 300000)) +
scale_y_log10(labels = comma, breaks = c(10, 100, 1000, 10000, 100000, 1000000)) +
labs(title = paste0("The 20 communities, within the yellow box, have received ",
top_20 %>% pull(pc_ben),
"% of all beneficiary allocations"),
subtitle = "The humanitarian community is working in 775 communities"
x = "Population",
com %>%
filter(activity != "ISIMM" & project_status %in% c("Completed", "Ongoing")) %>%
group_by(admin4pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
clusters = n_distinct(cluster)) %>%
left_join(pop %>% select(total_pop, admin4pcode, community = admin4name_en),
by = "admin4pcode") %>%
mutate(pc_ben = beneficiaries / sum(beneficiaries),
pc_pop = total_pop / sum(total_pop, na.rm = TRUE)) %>%
filter(beneficiaries > 0) %>%
ggplot(aes(x = total_pop, y = beneficiaries)) +
annotate(geom = "rect",
xmin = 3917, xmax = 249009,
ymin = 350700, ymax = 1983254,
colour = "goldenrod", alpha = 0) +
geom_point(aes(size = beneficiaries,
colour = clusters),
alpha = .7) +
scale_colour_viridis(option = "mako", direction = -1,
breaks = c(1, 3, 6, 9)) +
scale_size_continuous(breaks = c(100, 1000, 10000, 100000, 300000, 750000),
labels = comma) +
scale_x_log10(labels = comma, breaks = c(10, 100, 1000, 10000, 100000, 300000)) +
scale_y_log10(labels = comma, breaks = c(10, 100, 1000, 10000, 100000, 1000000)) +
labs(title = paste0("The 20 communities, within the yellow box, have received ",
top_20 %>% pull(pc_ben),
"% of all beneficiary allocations"),
subtitle = "The humanitarian community is working in 775 communities".
com %>%
filter(activity != "ISIMM" & project_status %in% c("Completed", "Ongoing")) %>%
group_by(admin4pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
clusters = n_distinct(cluster)) %>%
left_join(pop %>% select(total_pop, admin4pcode, community = admin4name_en),
by = "admin4pcode") %>%
mutate(pc_ben = beneficiaries / sum(beneficiaries),
pc_pop = total_pop / sum(total_pop, na.rm = TRUE)) %>%
filter(beneficiaries > 0) %>%
ggplot(aes(x = total_pop, y = beneficiaries)) +
annotate(geom = "rect",
xmin = 3917, xmax = 249009,
ymin = 350700, ymax = 1983254,
colour = "goldenrod", alpha = 0) +
geom_point(aes(size = beneficiaries,
colour = clusters),
alpha = .7) +
scale_colour_viridis(option = "mako", direction = -1,
breaks = c(1, 3, 6, 9)) +
scale_size_continuous(breaks = c(100, 1000, 10000, 100000, 300000, 750000),
labels = comma) +
scale_x_log10(labels = comma, breaks = c(10, 100, 1000, 10000, 100000, 300000)) +
scale_y_log10(labels = comma, breaks = c(10, 100, 1000, 10000, 100000, 1000000)) +
labs(title = paste0("The 20 communities, within the yellow box, have received ",
top_20 %>% pull(pc_ben),
"% of all beneficiary allocations"),
subtitle = "The humanitarian community is working in 775 communities",
x = "Population",
y = "Beneficiary frequencies",
size = "Beneficiaries")
top_20_df <- com %>%
filter(activity != "ISIMM" & project_status %in% c("Completed", "Ongoing")) %>%
group_by(admin4pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
left_join(pop %>% select(total_pop, admin4pcode),
by = "admin4pcode") %>%
mutate(pc_ben = beneficiaries / sum(beneficiaries),
pc_pop = total_pop / sum(total_pop, na.rm = TRUE)) %>%
arrange(desc(beneficiaries)) %>%
mutate(cum_pc = cumsum(pc_ben)) %>%
head(20)
top_20 <- top_20_df %>%
summarise(pc_ben = sum(pc_ben),
pc_pop = sum(pc_pop)) %>%
mutate_all(~ round(. * 100))
com %>%
filter(activity != "ISIMM" & project_status %in% c("Completed", "Ongoing")) %>%
group_by(admin4pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
clusters = n_distinct(cluster)) %>%
left_join(pop %>% select(total_pop, admin4pcode, community = admin4name_en),
by = "admin4pcode") %>%
mutate(pc_ben = beneficiaries / sum(beneficiaries),
pc_pop = total_pop / sum(total_pop, na.rm = TRUE)) %>%
filter(beneficiaries > 0) %>%
ggplot(aes(x = total_pop, y = beneficiaries)) +
annotate(geom = "rect",
xmin = 3917, xmax = 249009,
ymin = 350700, ymax = 1983254,
colour = "goldenrod", alpha = 0) +
geom_point(aes(size = beneficiaries,
colour = clusters),
alpha = .7) +
scale_colour_viridis(option = "mako", direction = -1,
breaks = c(1, 3, 6, 9)) +
scale_size_continuous(breaks = c(100, 1000, 10000, 100000, 300000, 750000),
labels = comma) +
scale_x_log10(labels = comma, breaks = c(10, 100, 1000, 10000, 100000, 300000)) +
scale_y_log10(labels = comma, breaks = c(10, 100, 1000, 10000, 100000, 1000000)) +
labs(title = paste0("The 20 communities, within the yellow box, have received ",
top_20 %>% pull(pc_ben),
"% of all beneficiary allocations"),
subtitle = paste0("The humanitarian community is working in ",
com %>% filter(!is.na(admin4pcode) & activity != "ISIMM") %>% {n_distinct(.$admin4pcode)},
" communities"),
x = "Population",
y = "Beneficiary frequencies",
size = "Beneficiaries")
ggsave("./img/fair_allocation.png", dpi = 300, height = 8.27, width = 11.69, units = "in")
ggsave("./img/reached_map_admin4.png", dpi = 300, height = 8.27, width = 11.69, units = "in")
com %>%
filter(activity != "ISIMM" & project_status %in% c("Completed", "Ongoing")) %>%
group_by(admin4pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
clusters = n_distinct(cluster), na.rm = TRUE) %>%
right_join(pop %>% select(total_pop, admin4pcode,
sub_district = admin3name_en,
admin3pcode,
governorate = admin1name_en,
community = location_name_en),
by = "admin4pcode") %>%
left_join(locations %>%
select(longitude_x, latitude_y, admin4pcode),
by = "admin4pcode") %>%
left_join(eq_score$data %>%
select(eq_score, admin4pcode),
by = "admin4pcode") %>%
mutate(total_pop = ifelse(beneficiaries > 0 & total_pop == 0,
beneficiaries,
total_pop)) %>%
filter(total_pop > 0) %>%
mutate(beneficiaries = ifelse(is.na(beneficiaries), 0, beneficiaries),
pc_reached = beneficiaries / total_pop,
pc_reached_scale = ifelse(pc_reached > 10, 10, pc_reached)) %>%
right_join(pcode3_shape,
by = c("admin3pcode" = "ADM3_PCODE")) %>%
filter(ADM1_PCODE %in% c("SY02", "SY07", "SY11") &
admin4pcode %in% (pop %>% pull(admin4pcode)) &
admin3pcode != "SY020500") %>%
st_as_sf() %>%
ggplot() +
geom_sf(size = .1, colour = "grey70") +
geom_point(aes(size = beneficiaries, colour = pc_reached_scale,
x = longitude_x, y = latitude_y,
text = paste0("sub_district: ", sub_district, "\n",
"community: ", community, "\n",
"admin4pcode: ", admin4pcode, "\n",
"population: ", format(total_pop, big.mark = ","), "\n",
"ben_freq: ", format(beneficiaries, big.mark = ","), "\n",
"clusters: ", clusters, "\n",
"%reached: ", round(pc_reached * 100, digits = 2), "%")),
alpha = .5) +
# setting NA value will not do anything if they won't even appear
scale_colour_viridis_c(option = "plasma", na.value = "grey25",
labels = percent) +
scale_size_continuous(labels = comma,
breaks = c(0, 100, 1000, 10000, 100000, 1000000, 2000000)) +
theme_void() +
theme(plot.background = element_rect(fill = "white", colour = NA)) +
labs(title = "Map of beneficiary frequencies",
subtitle = "All Clusters, except Health",
colour = "% Reached",
size = "Frequencies")
ggsave("./img/reached_map_admin4.png", dpi = 300, height = 8.27, width = 11.69, units = "in")
