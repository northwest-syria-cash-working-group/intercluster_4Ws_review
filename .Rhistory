library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(magrittr)
library(flextable)
library(ggrepel)
library(magrittr)
library(readxlsb)
library(widyr)
library(googlesheets4)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
pcode3_shape <-
sf::st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
nw_pcode3 <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1,
sheet = 1) %>%
clean_names() %>%
filter(ao_c == "NW") %>%
pull(admin3pcode)
locations <- read_excel("./data/Locations.xlsx") %>%
clean_names()
pop <- read_excel("./data/Population_Data_May_2022_final_01122022_with_SADD.xlsx",
sheet = 5,
skip = 2) %>%
clean_names() %>%
select(admin0name_en:longitude_x,
final_est_of_id_ps_may_2022:family_avg_size_total_pop) %>%
rename(idps = final_est_of_id_ps_may_2022,
total_pop = final_est_of_total_pop_may_2022,
avg_family_size = family_avg_size_total_pop)
names_eq <- c(
"date",
"governorate",
"district",
"sub_district",
"community",
"admin4",
"casualties",
"injuries",
"completely_destroyed_houses",
"damaged_unihabitable_houses",
"temporary_accommodation_centres",
"idps_in_all_centres",
"schools_as_accomodation_centres",
"idps_in_schools",
"tents_needed",
"blankets_mattresses_needed",
"temporary_accommodation_centres_available",
"accessible_civil_defense",
"latrines_available",
"meals_needed_per_day",
"need_blood_donations",
"health_services_available",
"necessary_medical_equipment",
"rubble_volunteers",
"telecoms_available",
"electricity_available",
"heating_fuel_needed"
)
eq <- read_excel("./data/syria-earthquake-impact-20-march-2023.xlsx",
sheet = "DATASET") %>%
setNames(names_eq)
fsl <- read_csv("./data/read/fsl.csv")
fsl %>% glimpse()
fsl %>%
mutate(project_status = ifelse(start_date < Sys.Date() & end_date > Sys.Date(),
"Ongoing",
"Completed"))
fsl %>%
mutate(project_status = ifelse(start_date < Sys.Date() & end_date > Sys.Date(),
"Ongoing",
"Completed")) %>%
count(project_status)
fsl %>%
mutate(project_status = case_when(start_date < Sys.Date() & end_date > Sys.Date() ~ "Ongoing",
end_date < Sys.Date() ~ "Completed",
start_date < Sys.Date() ~ "Planned",
# Just to catch the NAs, but FSL have their dates in order
TRUE ~ "Ongoing"))
fsl %>%
mutate(project_status = case_when(start_date < Sys.Date() & end_date > Sys.Date() ~ "Ongoing",
end_date < Sys.Date() ~ "Completed",
start_date < Sys.Date() ~ "Planned",
# Just to catch the NAs, but FSL have their dates in order
TRUE ~ "Ongoing")) %>%
count(project_status)
fsl %>%
mutate(project_status = case_when(start_date < Sys.Date() & end_date > Sys.Date() ~ "Ongoing",
end_date < Sys.Date() ~ "Completed",
start_date > Sys.Date() ~ "Planned",
# Just to catch the NAs, but FSL have their dates in order
TRUE ~ "Ongoing")) %>%
count(project_status)
fsl %>%
mutate(project_status = case_when(start_date < Sys.Date() & end_date > Sys.Date() ~ "Ongoing",
end_date < Sys.Date() ~ "Completed",
start_date > Sys.Date() ~ "Planned",
# Just to catch the NAs, but FSL have their dates in order
TRUE ~ "Ongoing")) %>%
filter(project_status == "Completed") %>%
head(10) %>%
select(start_date, end_date)
fsl %>%
mutate(project_status = case_when(start_date < Sys.Date() & end_date > Sys.Date() ~ "Ongoing",
end_date < Sys.Date() ~ "Completed",
start_date > Sys.Date() ~ "Planned",
# Just to catch the NAs, but FSL have their dates in order
TRUE ~ "Ongoing")) %>%
filter(project_status == "Ongoing") %>%
head(10) %>%
select(start_date, end_date)
fsl_clean <- function(tbl) {
tbl %>%
clean_names() %>%
rename(admin1pcode = admin1_pcode_do_not_write,
admin2pcode = admin2_pcode_do_not_write,
admin3pcode = admin3_pcode_do_not_write,
admin4pcode = location_pcode_do_not_write,
admin5pcode = camp_pcode_do_not_write,
transfer_value = value,
reported_to_other_sector = has_this_data_been_reported_to_another_sector,
beneficiaries = x_of_total_beneficiaries_assisted,
families = x_of_families_assisted,
start_date = starting_date,
end_date = ending_date,
delivery_modality = delivery_modality_in_kind_service_cash_voucher,
activity = fss_activity_do_not_write,
frequency = monthly_frequency) %>%
# Crazy -- this is the first time I've seen the 1904 start date
mutate_at(vars(start_date, end_date), ~ as.Date(as.numeric(.), origin = "1904-01-01")) %>%
mutate_at(vars(camp_name_cccm_official_name,
camp_name_if_not_listed_by_the_cccm,
admin5pcode), ~ ifelse(. == "", NA_character_, .)) %>%
mutate(camp_name = ifelse(!is.na(camp_name_cccm_official_name),
camp_name_cccm_official_name,
camp_name_if_not_listed_by_the_cccm),
total_usd = frequency * transfer_value * families) %>%
mutate(project_status = case_when(start_date < Sys.Date() & end_date > Sys.Date() ~ "Ongoing",
end_date < Sys.Date() ~ "Completed",
start_date > Sys.Date() ~ "Planned",
# Just to catch the NAs, but FSL have their dates in order
TRUE ~ "Ongoing"))
}
fsl <- rbind(
read_xlsb("./data/read/FSL_January 2023_5Ws_OCHA_22032023.xlsb",
sheet = "5Ws Actuals - Jan 2023") %>%
fsl_clean(),
read_xlsb("./data/read/FSL_February 2023_5Ws_OCHA_21042023.xlsb",
sheet = "5Ws Actuals - Feb 2023") %>%
fsl_clean(),
read_xlsb("./data/read/FSL_March 2023_5Ws_OCHA_17052023.xlsb",
sheet = "5Ws Actuals - Mar 2023") %>%
fsl_clean()
)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Ongoing") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Completed") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Completed") %>%
sample_n(10) %>%
select(start_date, end_date)
```{r}
fsl %>%
filter(project_status == "Completed") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Completed") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Planned") %>%
sample_n(10) %>%
select(start_date, end_date)
fsl %>%
filter(project_status == "Planned")
fsl %>% write_csv("./data/read/fsl.csv")
knitr::opts_chunk$set(echo = TRUE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(scales)
library(magrittr)
library(viridis)
library(patchwork)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(magrittr)
library(readxlsb)
library(tidymodels)
library(widyr)
library(googlesheets4)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
pcode3_shape <-
sf::st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
nw_pcode3 <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1,
sheet = 1) %>%
clean_names() %>%
filter(ao_c == "NW") %>%
pull(admin3pcode)
locations <- read_excel("./data/Locations.xlsx") %>%
clean_names()
pop <- read_excel("./data/Population_Data_May_2022_final_01122022_with_SADD.xlsx",
sheet = 5,
skip = 2) %>%
clean_names() %>%
select(admin0name_en:longitude_x,
final_est_of_id_ps_may_2022:family_avg_size_total_pop) %>%
rename(idps = final_est_of_id_ps_may_2022,
total_pop = final_est_of_total_pop_may_2022,
avg_family_size = family_avg_size_total_pop)
consolidation_cols <- function(tbl) {
tbl %>%
select(admin1pcode, admin2pcode, admin3pcode, admin4pcode,
admin5pcode, camp_name,
activity, beneficiaries,
month, project_status, cluster,
delivery_modality,
transfer_value, total_usd)
}
fsl %>%
mutate(month = str_to_lower(str_sub(reporting_month, start = 1L, end = 3L))) %>%
filter(activity == "Food Baskets" & reported_to_other_sector == "No") %>%
group_by(final_implementing_partner, admin4pcode, month) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE))
fsl %>%
mutate(month = str_to_lower(str_sub(reporting_month, start = 1L, end = 3L))) %>%
filter(activity == "Food Baskets" & reported_to_other_sector == "No") %>%
group_by(final_implementing_partner, admin4pcode, month) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
summarise(beneficiaries = mean(beneficiaries, na.rm = TRUE)) %>%
mutate(type = "food_cumulative")
# Total beneficiaries for food
# For monthly reached
fsl %>%
mutate(month = str_to_lower(str_sub(reporting_month, start = 1L, end = 3L))) %>%
filter(activity == "Food Baskets" & reported_to_other_sector == "No") %>%
group_by(final_implementing_partner, admin4pcode, month) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(type = "food_monthly")
# Total beneficiaries for food
# For monthly reached
fsl %>%
mutate(month = str_to_lower(str_sub(reporting_month, start = 1L, end = 3L))) %>%
filter(activity == "Food Baskets" & reported_to_other_sector == "No") %>%
group_by(final_implementing_partner, admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(type = "food_monthly")
# Cumulative calculation for food beneficiaries
fsl %>%
mutate(month = str_to_lower(str_sub(reporting_month, start = 1L, end = 3L))) %>%
filter(activity == "Food Baskets" & reported_to_other_sector == "No") %>%
group_by(final_implementing_partner, admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
summarise(beneficiaries = mean(beneficiaries, na.rm = TRUE)) %>%
mutate(type = "food_cumulative")
knitr::opts_chunk$set(echo = TRUE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(scales)
library(magrittr)
library(viridis)
library(patchwork)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(magrittr)
library(readxlsb)
library(tidymodels)
library(widyr)
library(googlesheets4)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
pcode3_shape <-
sf::st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp",
quiet = TRUE)
nw_pcode3 <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1,
sheet = 1) %>%
clean_names() %>%
filter(ao_c == "NW") %>%
pull(admin3pcode)
locations <- read_excel("./data/Locations.xlsx") %>%
clean_names()
pop <- read_excel("./data/Population_Data_May_2022_final_01122022_with_SADD.xlsx",
sheet = 5,
skip = 2) %>%
clean_names() %>%
select(admin0name_en:longitude_x,
final_est_of_id_ps_may_2022:family_avg_size_total_pop) %>%
rename(idps = final_est_of_id_ps_may_2022,
total_pop = final_est_of_total_pop_may_2022,
avg_family_size = family_avg_size_total_pop)
fsl <- read_csv("./data/read/fsl.csv")
# Total beneficiaries for food
# For monthly reached
fsl %>%
mutate(month = str_to_lower(str_sub(reporting_month, start = 1L, end = 3L))) %>%
filter(activity == "Food Baskets" & reported_to_other_sector == "No") %>%
group_by(admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(type = "food_monthly")
# Cumulative calculation for food beneficiaries
fsl %>%
mutate(month = str_to_lower(str_sub(reporting_month, start = 1L, end = 3L))) %>%
filter(activity == "Food Baskets" & reported_to_other_sector == "No") %>%
group_by(admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
summarise(beneficiaries = mean(beneficiaries, na.rm = TRUE)) %>%
mutate(type = "food_cumulative")
# Reading these all in so that your computer doesn't
# commit suicide when cleaning them in and combining them
cash <- read_csv("./data/read/cbr_com_20230519.csv") %>%
filter(str_detect(cluster, "Multipurpose")) %>%
# Resolving a stupid problem with Shafak
mutate(beneficiaries = ifelse(is.na(beneficiaries) & !is.na(families),
families * 5,
beneficiaries))
fsl_tracker <- read_csv("./data/read/fsl_tracker_20230519.csv")
fsl <- read_csv("./data/read/fsl.csv")
prot <- read_csv("./data/read/prot.csv")
nut <- read_csv("./data/read/nut.csv")
snfi <- read_csv("./data/read/snfi.csv")
cccm <- read_csv("./data/read/cccm.csv")
wash <- read_csv("./data/read/wash.csv")
edu <- read_csv("./data/read/edu.csv")
erl <- read_csv("./data/read/erl.csv")
wash %>%
mutate(month = str_to_lower(month)) %>%
filter(project_status == "Completed") %>%
group_by(month,
health_facility_name,
school_name,
collective_shelter_name,
admin5pcode,
admin4pcode) %>%
slice(which.max(so2)) %>%
group_by(admin4pcode, month) %>%
summarise(beneficiaries = sum(so2, na.rm = TRUE)) %>%
ungroup() %>%
mutate(cluster = "WASH")
cash %>%
group_by(month = month(end_date, label = TRUE)) %>%
filter(!is.na(month)) %>%
mutate(month = str_to_lower(month)) %>%
filter(project_status == "Completed") %>%
mutate(month = ifelse(month == "nov", month(Sys.Date()), month)) %>%
group_by(month, admin4pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
ungroup() %>%
mutate(cluster = "Cash")
erl %>%
mutate(month = str_sub(implementing_month, start = 5L, end = 7L),
month = str_to_lower(month)) %>%
filter(report_this_to_any_other_sector == "No") %>%
group_by(month, admin4pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(type = "ERL")
fsl %>%
mutate(month = str_to_lower(str_sub(reporting_month, start = 1L, end = 3L))) %>%
filter(activity == "Food Baskets" & reported_to_other_sector == "No") %>%
group_by(admin4pcode) %>%
slice(which.max(beneficiaries)) %>%
ungroup() %>%
group_by(month, admin4pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(type = "Food")
